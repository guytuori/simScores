group_by(display_name, lastf) %>%
mutate(id_num = display_name %>% factor %>% as.numeric,
j_id = paste0(lastf, id_num)) %>%
ungroup %>% group_by(lastf) %>% distinct(display_name) %>% filter(n() > 1) %>% arrange(lastf) %>% ungroup %>% group_by(lastf) %>% factor(lastf) %>% View
cuba.raw %>%
mutate(display_name = j_display_name(Name),
lastf = getLastF(display_name)) %>%
group_by(display_name, lastf) %>%
mutate(id_num = display_name %>% factor %>% as.numeric,
j_id = paste0(lastf, id_num)) %>%
ungroup %>% group_by(lastf) %>% distinct(display_name) %>% filter(n() > 1) %>% arrange(lastf) %>% ungroup %>% group_by(lastf) %>% factor(display_name) %>% View
assign_id <- function(dat) {
lst <- c("")
for (i in 1:nrow(dat))
{}
}
assign_id
assign_id <- function(dat) {
lst <- c("")
for (i in 1:nrow(dat))
{
if (dat[i,"lastf"] %in% lst) {
}
}
}
}
install.packages("hash")
library(hash)
library(hash-package)
library(hash)
hash
h <- hash(c("a", 1))
cuba.raw %>%
mutate(display_name = j_display_name(Name),
lastf = getLastF(display_name)) %>%
group_by(display_name, lastf) %>%
mutate(id_num = display_name %>% factor %>% as.numeric,
j_id = paste0(lastf, id_num)) %>%
ungroup %>% group_by(lastf) %>% distinct(display_name) %>% filter(n() > 1) %>% arrange(lastf) %>% ungroup %>% group_by(lastf, display_name) %>% mutate(id = display_name %>% as.factor()) %>% View
cuba.raw %>%
mutate(display_name = j_display_name(Name),
lastf = getLastF(display_name)) %>%
group_by(display_name, lastf) %>%
mutate(id_num = display_name %>% factor %>% as.numeric,
j_id = paste0(lastf, id_num)) %>%
ungroup %>% group_by(lastf) %>% distinct(display_name) %>% filter(n() > 1) %>% arrange(lastf) %>% ungroup %>% group_by(lastf, display_name) %>% class(display_name)
cuba.raw %>%
mutate(display_name = j_display_name(Name),
lastf = getLastF(display_name)) %>%
group_by(display_name, lastf) %>%
mutate(id_num = display_name %>% factor %>% as.numeric,
j_id = paste0(lastf, id_num)) %>%
ungroup %>% group_by(lastf) %>% distinct(display_name) %>% filter(n() > 1) %>% arrange(lastf) %>% ungroup %>% group_by(lastf, display_name) %>% class()
cuba.raw %>%
mutate(display_name = j_display_name(Name),
lastf = getLastF(display_name)) %>%
group_by(display_name, lastf) %>%
mutate(id_num = display_name %>% factor %>% as.numeric,
j_id = paste0(lastf, id_num)) %>%
ungroup %>% group_by(lastf) %>% distinct(display_name) %>% filter(n() > 1) %>% arrange(lastf) %>% ungroup %>% group_by(lastf, display_name) %>% select(display_name) %> %class()
cuba.raw %>%
mutate(display_name = j_display_name(Name),
lastf = getLastF(display_name)) %>%
group_by(display_name, lastf) %>%
mutate(id_num = display_name %>% factor %>% as.numeric,
j_id = paste0(lastf, id_num)) %>%
ungroup %>% group_by(lastf) %>% distinct(display_name) %>% filter(n() > 1) %>% arrange(lastf) %>% ungroup %>% group_by(lastf, display_name) %>% select(display_name) %>% class()
temp <- cuba.raw %>%
mutate(display_name = j_display_name(Name),
lastf = getLastF(display_name)) %>%
group_by(display_name, lastf) %>%
mutate(id_num = display_name %>% factor %>% as.numeric,
j_id = paste0(lastf, id_num)) %>%
ungroup %>% group_by(lastf) %>% distinct(display_name) %>% filter(n() > 1) %>% arrange(lastf) %>% ungroup
View(temp)
temp %>% factor(display_name) %>% View
factor(temp$display_name) %>% View
factor(temp$display_name) %>% as.numeric %>% View
factor(temp$display_name) %>% View
factor(temp$lastf) %>% View
factor(temp$lastf) %>% as.numeric %>% View
mutate(temp, lastfID= factor(temp$lastf) %>% as.numeric) %>% View
myfun <- function(dat) {
}
myfun <- function(dat, len) {
for (1:len) {
for 1:len {
for i in 1:len {
for (i in 1:len) {
mydat <- filter(dat, lastfID == i)
mydat$NUM <- seq(1:nrow(mydat))
}
myfun <- function(dat, len) {
for (i in 1:len) {
mydat <- filter(dat, lastfID == i)
mydat$NUM <- seq(1:nrow(mydat))
}
}
myfun
myfun <- function(dat, len) {
for (i in 1:len) {
mydat <- filter(dat, lastfID == i)
mydat$NUM <- seq(1:nrow(mydat))
}
}
myfun <- function(dat, len) {
new.dat <- data.frame()
for (i in 1:len) {
mydat <- filter(dat, lastfID == i)
mydat$NUM <- seq(1:nrow(mydat))
new.dat <- crow(new.dat, mydat)
}
return new.dat
}
myfun <- function(dat, len) {
new.dat <- data.frame()
for (i in 1:len) {
mydat <- filter(dat, lastfID == i)
mydat$NUM <- seq(1:nrow(mydat))
new.dat <- crow(new.dat, mydat)
}
return(new.dat)
}
myfun(temp, 18) %>% View
temp1 <- mutate(temp, lastfID= factor(temp$lastf) %>% as.numeric)
myfun(temp1, 18) %>% View
myfun
myfun <- function(dat, len) {
new.dat <- data.frame()
for (i in 1:len) {
mydat <- filter(dat, lastfID == i)
mydat$NUM <- seq(1:nrow(mydat))
new.dat <- rbind(new.dat, mydat)
}
return(new.dat)
}
myfun(temp1, 18) %>% View
myfun
View(temp1)
temp1$lastfID %>% class
source('N:/Apps/simScores/R/clean-cuba.R')
assignCID(temp1) %>% View
assignCID(temp) %>% View
source('N:/Apps/simScores/R/clean-cuba.R')
source('N:/Apps/simScores/R/clean-cuba.R')
source('N:/Apps/simScores/R/clean-cuba.R')
assignCID(temp) %>% View
source('N:/Apps/simScores/R/clean-cuba.R')
run_cuba_scrape(type="bat")
run_cuba_scrape(type="bat") %>% View
run_cuba_scrape(type="bat")
source('N:/Apps/simScores/R/clean-cuba.R')
source('N:/Apps/simScores/R/clean-cuba.R')
run_cuba_scrape(type="bat")
run_cuba_scrape(type="bat")
assignCID(temp) %>% View
proper <- assignCID(temp)
source('N:/Apps/simScores/R/clean-cuba.R')
source('N:/Apps/simScores/R/clean-cuba.R')
replaceID(temp, proper) %>% View
source('N:/Apps/simScores/R/clean-cuba.R')
replaceID(temp, proper) %>% View
temp %>% assignCID %>% (dat=temp) %>% View
replaceID(temp, assignCID(temp)) %>% View
temp %>% assignCID %>% (dat=temp) %>% View
source('N:/Apps/simScores/R/clean-cuba.R')
temp %>% assignCID %>% (dat=temp) %>% View
replaceID(temp, assignCID(temp)) %>% View
View(cuba.raw)
cuba.raw %>% clean_cuba(j_ids, type="bat") %>% View
scrape_cuban_bref(type="bat") %>% clean_cuba(j_ids, type="bat") %>% View
source('N:/Apps/simScores/R/clean-cuba.R')
scrape_cuban_bref(type="bat") %>% clean_cuba(j_ids, type="bat") %>% View
View(cuba.raw)
cuba.raw %>% write.csv("cubatemp.csv")
cuba.read <- read.csv("cubatemp.csv", header=T)
cuba.read %>% clean_cuba(j_ids, type="bat") %>% View
cuba<- run_cuba_scrape
cuba<- run_cuba_scrape()
source('N:/Apps/simScores/R/clean-cuba.R')
cuba<- run_cuba_scrape()
View(cuba)
source('N:/Apps/simScores/R/clean-cuba.R')
cuba.raw %>% mutate(display_name = j_display_name(Name),
lastf = getLastF(display_name)) %>%
group_by(display_name, lastf) %>%
mutate(id_num = Name %>% as.factor() %>% as.numeric(),
j_id = paste0(lastf, id_num)) %>%
ungroup() %>% assignCID %>% replaceID(cuba.raw) %>% View
cuba.raw %>% mutate(display_name = j_display_name(Name),
lastf = getLastF(display_name)) %>%
group_by(display_name, lastf) %>%
mutate(id_num = Name %>% as.factor() %>% as.numeric(),
j_id = paste0(lastf, id_num)) %>%
ungroup() %>% View
source('N:/Apps/simScores/R/clean-cuba.R')
cuba<- run_cuba_scrape()
source('N:/Apps/simScores/R/clean-cuba.R')
cuba<- run_cuba_scrape()
cuba.cleaned <- cuba.raw %>% mutate(display_name = j_display_name(Name),
lastf = getLastF(display_name)) %>%
group_by(display_name, lastf) %>%
mutate(id_num = Name %>% as.factor() %>% as.numeric(),
j_id = paste0(lastf, id_num)) %>%
ungroup()
View(cuba.cleaned)
cuba.cleaned %>% assignCID %>% View
View(temp)
source('N:/Apps/simScores/R/clean-cuba.R')
cuba<- run_cuba_scrape()
View(cuba)
View(cuba.raw)
cuba<- run_cuba_scrape()
View(cuba)
duplicated(cuba$MLBID)
cuba[duplicated(cuba$MLBID),]
cuba[duplicated(cuba$MLBID),] %>% View
cuba[duplicated(cuba$MLBID),] %>% filter(is.numeric(MLBID) %>% View
)
cuba[duplicated(cuba$MLBID),] %>% filter(is.numeric(MLBID)) %>% View
cuba[duplicated(cuba$MLBID),] %>% filter(n(MLBID) == 6) %>% View
cuba[duplicated(cuba$MLBID),] %>% filter(length(MLBID) == 6) %>% View
cuba[duplicated(cuba$MLBID),] %>% filter(as.numeric(MLBID) > 500000) %>% View
cuba[duplicated(cuba$MLBID),] %>% filter(as.numeric(MLBID) > 0) %>% View
cuba[duplicated(cuba$MLBID),] %>% filter(as.numeric(MLBID) > 0) %>% arrange(MLBID) %>% View
cuba[duplicated(cuba$MLBID, cuba$Year),] %>% filter(as.numeric(MLBID) > 0) %>% arrange(MLBID) %>% View
cuba %>% filter(MLBID == 339882) %>% View
View(cuba)
View(japan.cleaned)
View(cuba)
cuba.pitch <- scrape_cuban_bref(type="pit")
cuba.pitch <- run_cuba_scrape(type="pit")
cuba.pitch <- scrape_cuban_bref(type="pit")
View(cuba.pitch)
View(cuba.pitch)
source('N:/Apps/simScores/R/clean-cuba.R')
source('N:/Apps/simScores/R/clean-cuba.R')
cuba.pitch <- run_cuba_scrape(type="pit")
View(cuba.pitch)
names(cuba.pitch)
View(cuba.pitch)
clean_cuba(cuba.pitch, "pit")
clean_cuba(cuba.pitch, j_ids, "pit")
clean_cuba(cuba.pitch, j_ids, type="pit")
clean_cuba(cuba.pitch, c_ids, type="pit")
c_ids=read.csv("N:/Apps/simScoresApp/data/manual-info/cuban_ids.csv", header=T)
clean_cuba(cuba.pitch, c_ids, type="pit")
cuba.bat <- run_cuba_scrape(type="bat")
View(cuba.bat)
View(cuba.pitch)
View(cuba.pitch)
source('N:/Apps/simScores/R/clean-cuba.R')
cuba.pitch <- run_cuba_scrape(type="pit")
cuba.pitch <- run_cuba_scrape(type="pit")
source('N:/Apps/simScores/R/clean-cuba.R')
cuba.pitch <- run_cuba_scrape(type="pit")
View(cuba.pitch)
get_MLEs(minors = paste0(download_dir, "bat_minors2.csv"),
majors = paste0(download_dir, "bat_majors2.csv"),
bio_info = paste0(manual_dir, "bio_bat.csv"),
position = paste0(manual_dir, "positions.csv"),
injuries = paste0(manual_dir, "injuries.csv"),
park_factors = paste0(manual_dir, "Park_Factors.csv"),
year_factors = paste0(manual_dir, "Year-Factors.csv"),
multipliers = paste0(manual_dir, "Level_Multipliers.csv"),
ignore_players = paste0(manual_dir, "players_to_ignore.csv"),
japan_ids = paste0(manual_dir, "japan_ids.csv"),
download_dir = download_dir,
clean_dir = paste0(clean_dir, "batters/"),
pf_dir = pf_dir,
yf_dir = yf_dir,
mle_dir = mle_dir,
miss_dir = miss_dir,
app_dir = paste0(app_data_dir, "batters/"),
wd = wd,
type = "bat",
yrs = 2005:2015)
source('N:/Apps/simScores/R/wrappers.R')
get_MLEs(minors = paste0(download_dir, "bat_minors2.csv"),
majors = paste0(download_dir, "bat_majors2.csv"),
bio_info = paste0(manual_dir, "bio_bat.csv"),
position = paste0(manual_dir, "positions.csv"),
injuries = paste0(manual_dir, "injuries.csv"),
park_factors = paste0(manual_dir, "Park_Factors.csv"),
year_factors = paste0(manual_dir, "Year-Factors.csv"),
multipliers = paste0(manual_dir, "Level_Multipliers.csv"),
ignore_players = paste0(manual_dir, "players_to_ignore.csv"),
japan_ids = paste0(manual_dir, "japan_ids.csv"),
download_dir = download_dir,
clean_dir = paste0(clean_dir, "batters/"),
pf_dir = pf_dir,
yf_dir = yf_dir,
mle_dir = mle_dir,
miss_dir = miss_dir,
app_dir = paste0(app_data_dir, "batters/"),
wd = wd,
type = "bat",
yrs = 2005:2015)
wd <- getwd()
get_MLEs(minors = paste0(download_dir, "bat_minors2.csv"),
majors = paste0(download_dir, "bat_majors2.csv"),
bio_info = paste0(manual_dir, "bio_bat.csv"),
position = paste0(manual_dir, "positions.csv"),
injuries = paste0(manual_dir, "injuries.csv"),
park_factors = paste0(manual_dir, "Park_Factors.csv"),
year_factors = paste0(manual_dir, "Year-Factors.csv"),
multipliers = paste0(manual_dir, "Level_Multipliers.csv"),
ignore_players = paste0(manual_dir, "players_to_ignore.csv"),
japan_ids = paste0(manual_dir, "japan_ids.csv"),
download_dir = download_dir,
clean_dir = paste0(clean_dir, "batters/"),
pf_dir = pf_dir,
yf_dir = yf_dir,
mle_dir = mle_dir,
miss_dir = miss_dir,
app_dir = paste0(app_data_dir, "batters/"),
wd = wd,
type = "bat",
yrs = 2005:2015)
manual_dir <- "N:/Apps/simScoresApp/data/manual-info"
clean_dir <- "N:/Apps/simScoresApp/data/1-cleaned"
get_MLEs(minors = paste0(download_dir, "bat_minors2.csv"),
majors = paste0(download_dir, "bat_majors2.csv"),
bio_info = paste0(manual_dir, "bio_bat.csv"),
position = paste0(manual_dir, "positions.csv"),
injuries = paste0(manual_dir, "injuries.csv"),
park_factors = paste0(manual_dir, "Park_Factors.csv"),
year_factors = paste0(manual_dir, "Year-Factors.csv"),
multipliers = paste0(manual_dir, "Level_Multipliers.csv"),
ignore_players = paste0(manual_dir, "players_to_ignore.csv"),
japan_ids = paste0(manual_dir, "japan_ids.csv"),
download_dir = download_dir,
clean_dir = paste0(clean_dir, "batters/"),
pf_dir = pf_dir,
yf_dir = yf_dir,
mle_dir = mle_dir,
miss_dir = miss_dir,
app_dir = paste0(app_data_dir, "batters/"),
wd = wd,
type = "bat",
yrs = 2005:2015)
manual_dir <- "N:/Apps/simScoresApp/data/manual-info/"
clean_dir <- "N:/Apps/simScoresApp/data/1-cleaned/"
get_MLEs(minors = paste0(download_dir, "bat_minors2.csv"),
majors = paste0(download_dir, "bat_majors2.csv"),
bio_info = paste0(manual_dir, "bio_bat.csv"),
position = paste0(manual_dir, "positions.csv"),
injuries = paste0(manual_dir, "injuries.csv"),
park_factors = paste0(manual_dir, "Park_Factors.csv"),
year_factors = paste0(manual_dir, "Year-Factors.csv"),
multipliers = paste0(manual_dir, "Level_Multipliers.csv"),
ignore_players = paste0(manual_dir, "players_to_ignore.csv"),
japan_ids = paste0(manual_dir, "japan_ids.csv"),
download_dir = download_dir,
clean_dir = paste0(clean_dir, "batters/"),
pf_dir = pf_dir,
yf_dir = yf_dir,
mle_dir = mle_dir,
miss_dir = miss_dir,
app_dir = paste0(app_data_dir, "batters/"),
wd = wd,
type = "bat",
yrs = 2005:2015)
download_dir <- "N:/Apps/simScoresApp/data/0-downloads/"
get_MLEs(minors = paste0(download_dir, "bat_minors2.csv"),
majors = paste0(download_dir, "bat_majors2.csv"),
bio_info = paste0(manual_dir, "bio_bat.csv"),
position = paste0(manual_dir, "positions.csv"),
injuries = paste0(manual_dir, "injuries.csv"),
park_factors = paste0(manual_dir, "Park_Factors.csv"),
year_factors = paste0(manual_dir, "Year-Factors.csv"),
multipliers = paste0(manual_dir, "Level_Multipliers.csv"),
ignore_players = paste0(manual_dir, "players_to_ignore.csv"),
japan_ids = paste0(manual_dir, "japan_ids.csv"),
download_dir = download_dir,
clean_dir = paste0(clean_dir, "batters/"),
pf_dir = pf_dir,
yf_dir = yf_dir,
mle_dir = mle_dir,
miss_dir = miss_dir,
app_dir = paste0(app_data_dir, "batters/"),
wd = wd,
type = "bat",
yrs = 2005:2015)
library(simScores)
library(simScores)
devtools::install_github("naweinberger/simScores")
shiny::runApp('N:/Apps/simScoresApp/b-comparison-app')
shiny::runApp('N:/Apps/simScoresApp/b-comparison-app')
View(cuba.bat)
View(cuba.bat)
cuba.bat %>% filter(MLBID="493316")
cuba.bat %>% filter(MLBID=="493316")
cuba.bat %>% filter(MLBID=="\493316)
cuba.bat %>% filter(MLBID=="493316)
cuba.bat %>% filter(MLBID=="493316)
cuba.bat %>% filter(MLBID=="493316)
cuba.bat %>% filter(MLBID==493316)
cuba.bat %>% filter(MLBID==370122)
shiny::runApp('N:/Apps/simScoresApp/b-comparison-app')
install.packages("Rcpp")
bat="bat"
pit="pit"
bat.cuba <- run_cuba_scrape(bat)
library(magrittr)
library(dplyr)
bat.cuba <- run_cuba_scrape(bat)
library(simScores)
bat.cuba <- run_cuba_scrape(bat)
pit.cuba <- run_cuba_scrape(pit)
View(bat.cuba)
View(pit.cuba)
update_apps(wd="N:/Apps/simScoresApp")
source('N:/Apps/simScores/R/clean-data.R')
update_apps(wd="N:/Apps/simScoresApp")
source('N:/Apps/simScores/R/app-processing.R')
update_apps(wd="N:/Apps/simScoresApp")
devtools::install_github("naweinberger/simScores")
devtools::install_github("naweinberger/simScores" ref="develop")
devtools::install_github("naweinberger/simScores", ref="develop")
shinyapps::appDependencies()
devtools::install_github("naweinberger/simScores", ref="e3a3546")
library(simScores)
shiny::runApp('N:/Apps/simScoresApp/b-comparison-app')
devtools::install_github("naweinberger/simScores", ref="develop")
devtools::install_github("naweinberger/simScores", ref="develop")
devtools::install_github("naweinberger/simScores", ref="develop")
shiny::runApp('N:/Apps/simScoresApp/b-comparison-app')
load("N:/Apps/simScoresApp/b-comparison-app/bat_simscore_data.RData")
View(raw_trad)
m = lm(HR ~ 2B, raw_trad)
library(plyr)
m = lm(HR ~ 2B, raw_trad)
library(dplyr)
m = lm(HR ~ 2B, raw_trad)
lm(HR ~ 2B, raw_trad)
lm
lm()
lm(HR ~ 2B, raw_trad)
raw_trad$names['2B']
raw_trad$names[3]
names(raw_trad)['2B']
names(raw_trad)[1]
names(raw_trad)[5]
names(raw_trad)[10]
names(raw_trad)[15]
names(raw_trad)[13]
names(raw_trad)[13] <- "X2B"
names(raw_trad)[13]
lm(HR ~ X2B, raw_trad)
lm(X2B ~ HR, raw_trad)
m = lm(X2B ~ HR, raw_trad)
n = lm(HR ~ X2B, raw_trad)
m$r.squared
summary(m)$r.squared
summary(n)$r.squared
names(raw_trad)[14]
names(raw_trad)[14] <- "X3B"
summary(lm(HR ~ X3B, raw_trad))$r.squared
summary(lm(HR ~ BB, raw_trad))$r.squared
summary(lm(HR ~ HBP, raw_trad))$r.squared
summary(lm(HR ~ K, raw_trad))$r.squared
summary(lm(K ~ HR, raw_trad))$r.squared
library(ggplot)
library(ggplot2)
ggplot(data = raw_trad, aes(x = HR, y = K)) + geom_point()
ggplot(data = raw_trad, aes(x = K, y = HR)) + geom_point()
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point()
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + geom_smooth(method=quadratic)
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + geom_smooth(method=auto)
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + geom_smooth(method=lm)
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + geom_smooth(method="auto")
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + geom_smooth(method="quadratic")
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + geom_smooth(method="loess")
;
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="ln")
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="lm")
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="lm", formula= HR ~ X2B)
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + stat_smooth(data = raw_trad, method="lm", formula= HR ~ X2B)
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="lm", formula= raw_trad$HR ~ raw_trad$X2B)
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="lm")
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="gam")
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="gam", formula=y~x)
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="gam", formula=HR~X2B)
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="gam", formula=y~100*x)
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="gam", formula=y~100x)
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="gam", formula=y~100)
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="gam", formula=y~poly(x, 2))
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="gam", formula=poly(y, 2)~x)
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="gam", formula=x~y)
ggplot(data = raw_trad, aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="gam", formula=y~x)
ggplot(data = raw_trad[1:100,], aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="gam", formula=y~x)
ggplot(data = raw_trad[1:100,], aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="lm", formula=y~x)
ggplot(data = raw_trad[1:200,], aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="lm", formula=y~x)
ggplot(data = raw_trad[1:10,], aes(x = HR, y = X2B)) + geom_point() + stat_smooth(method="lm", formula=y~x)
shiny::runApp('N:/Apps/CollegeApps/collegebattingsimscores')
shiny::runApp('N:/Apps/CollegeApps/collegebattingstats')
shiny::runApp('N:/Apps/CollegeApps/collegeleaderstats')
devtools::load_all(".")
get_comp_app_data(app_data_dir = "N:/Apps/simScoresApp/data/6-for-apps/batters/",
#'                   app_dir = "N:/Apps/simScoresApp/b-comparison-app/",
#'                   type = "bat")
;
;
;
get_comp_app_data(app_data_dir = "N:/Apps/simScoresApp/data/6-for-apps/batters/",app_dir = "N:/Apps/simScoresApp/b-comparison-app/",type = "bat")
devtools::load_all(".")
get_comp_app_data(app_data_dir = "N:/Apps/simScoresApp/data/6-for-apps/batters/",app_dir = "N:/Apps/simScoresApp/b-comparison-app/",type = "bat")
source('N:/Apps/simScores/R/wrappers.R')
update_apps(wd = "N:/Apps/simScoresApp")
get_comp_app_data(app_data_dir = "N:/Apps/simScoresApp/data/6-for-apps/batters/",app_dir = "N:/Apps/simScoresApp/b-comparison-app/",type = "bat")
source('N:/Apps/simScores/R/wrappers.R')
